#include <Arduino.h>
#include "Screen.h"

namespace segments{
        
#define LOGO_WIDTH 72
#define LOGO_HEIGHT 80

    const unsigned char myLogo [] PROGMEM = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xf0, 
	    0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xc3, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	    0x63, 0x87, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x67, 0x0f, 0xf8, 0x7f, 0xff, 0xff, 0xff, 
	    0xff, 0xfc, 0x6e, 0x1f, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7c, 0x3f, 0xfe, 0x1f, 0xff, 
	    0xff, 0xff, 0xff, 0xfc, 0x78, 0x7f, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xe1, 0xff, 0xff, 
	    0x87, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xc3, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	    0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 
	    0xfe, 0x1f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfe, 0x3f, 0xff, 
	    0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0x81, 
	    0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 
	    0xff, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 
	    0xfe, 0x3f, 0xff, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xff, 0x81, 0x80, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0x81, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 
	    0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xf8, 0xff, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0x80, 0x80, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xf8, 0xff, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xc1, 0xc1, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    };

    //Constructor
    Screen::Screen(uint8_t width, uint8_t height): oled(width, height, &Wire, -1) {
    }

    void Screen::Init(){

        oled.begin(SSD1306_SWITCHCAPVCC, 0x3C);
        oled.clearDisplay();
        oled.setTextSize(1);
        oled.setTextColor(SSD1306_WHITE);

        oled.drawBitmap(30, 0, myLogo ,LOGO_WIDTH, LOGO_HEIGHT, SSD1306_WHITE);
        oled.display();

        Serial.print("Screen(OLED) Initialized Successfully");
        Serial.println();
    }

    void Screen::Update(){
    }

    void Screen::onNotify(const HouseState& state){

        oled.clearDisplay();
        
        if (state.Temperature >= 70){
            oled.setCursor(0, 32);
            oled.setTextSize(1);
            oled.println("Hight Temp Detect");
        }
        else if (state.IsDoorPretectorActive && state.IsMainDoorOpen){
            oled.setCursor(0, 32);
            oled.setTextSize(1);
            oled.println("its a rubbery");
        }
        else{
            oled.setCursor(0, 0);
            oled.setTextSize(1);
            oled.println("Temprature: " + String(HouseState::Instance.Temperature));
            oled.println("Humidity: " +  String(HouseState::Instance.Humidity));
            oled.println("Lights: " + String(HouseState::Instance.IsLightOn ? "On" : "Off"));
            oled.println("Fan: " + String(HouseState::Instance.IsFanActive ? "On" : "Off"));
            oled.println("Door: " + String(HouseState::Instance.IsMainDoorOpen ? "Open" : "Close"));
        }

        oled.display();
        Serial.println("Recieve state from subjects in {screen}");
    }
}